<html lang="en">

<head>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/anuraghazra/VerlyRangeSlider@v1.0.0/src/style.css" />

	<style>
		html,
		body {
			margin: 0;
			height: 100%;
			overflow: hidden
		}

		@media screen and (max-height: 250px) {}
	</style>
	<meta charset="utf-8">
	<title>
		drawWidMe
	</title>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
		integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

	<meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.7.5/lodash.min.js"></script>


<script src="/socket.io/socket.io.js"></script>
<script>



	function pause(milliseconds) {
		var dt = new Date();
		while ((new Date()) - dt <= milliseconds) { /* Do nothing */ }
	}



	var toggleScreen = function () {
		var doc = window.document;
		var docEl = doc.documentElement;

		var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
		var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;

		if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
			requestFullScreen.call(docEl);
		}
		else {
			cancelFullScreen.call(doc);
		}

	};
</script>

<body style="overscroll-behavior: none;">

	<div class="bs-example">

		<input type="text" style="display:none; height: 1px; width:1px" id='userinfo' value=<%= username %>>
		<p id="userroom" style="font-size: 1px; display: none;"><%=userroom%></p>


		<button type="button" onclick="changeColor('yellow')" class="btn btn-warning"
			style="border-radius: 30px; height: 10px; width: 10px;" data-toggle="button" aria-pressed="false"
			autocomplete="off">
		</button>
		<button type="button" onclick="changeColor('black')" class="btn btn-dark"
			style="border-radius: 30px; height: 10px; width: 10px;" data-toggle="button" aria-pressed="false"
			autocomplete="off">
		</button>
		<button type="button" onclick="changeColor('pink')" class="btn"
			style="border-radius: 30px; height: 10px; width: 10px; background-color: pink;" data-toggle="button"
			aria-pressed="false" autocomplete="off">
		</button>

		<button type="button" onclick="changeColor('white')" class="btn"
			style="border-radius: 30px; height: 10px; width: 10px; border-color: black; background-color: white;"
			data-toggle="button" aria-pressed="false" autocomplete="off">
		</button>
		<button type="button" onclick="changeColor('lightblue')" class="btn"
			style="border-radius: 30px; height: 10px; width: 10px; background-color: lightblue;" data-toggle="button"
			aria-pressed="false" autocomplete="off">
		</button>

		<button type="button" onclick="changeColor('blueviolet')" class="btn"
			style="border-radius: 30px; height: 10px; width: 10px; background-color: blueviolet;" data-toggle="button"
			aria-pressed="false" autocomplete="off">
		</button>


		<button type="button" onclick="changeColor('lightcoral')" class=" btn"
			style="border-radius: 30px; height: 10px; width: 10px; background-color: lightcoral;" data-toggle="button"
			aria-pressed="false" autocomplete="off">
		</button>



		<button type="button" onclick="changeColor('greenyellow')" class=" btn"
			style="border-radius: 30px; height: 10px; width: 10px; background-color: greenyellow;" data-toggle="button"
			aria-pressed="false" autocomplete="off">
		</button>

		<label for="favcolor"><img
				src="https://i7.pngguru.com/preview/243/1005/126/web-colors-web-page-color-picker-desktop-wallpaper-color-picker-icon.jpg"
				width="25px" height="25px" /></label>
		<input type="color" id="favcolor" name="favcolor" style="display: none;" onchange="changeColor(this.value);"
			value="#ff0000">

		<img src="https://cdn0.iconfinder.com/data/icons/arrows-glyph/614/2309_-_Full_Screen-512.png" width="25px"
			height="25px" onclick="toggleScreen()" />
		<input class="slider" style="width: 20%;" id="range-slider" type="range" min="1" step="2" max="80" value="20">
		<img id="start" src="https://cdn3.iconfinder.com/data/icons/flat-icons-web/40/Record-512.png" width="25px"
			height="25px" onclick="startRecording()" />
		<img id="pause" style="display: none;"
			src="https://cdn0.iconfinder.com/data/icons/multimedia-126/24/202_-_Multimedia_pause_icon_circle_button-512.png"
			width="25px" height="25px" onclick="stopRecording()" />
		<img id="start"
			src="https://cdn4.iconfinder.com/data/icons/proglyphs-mailing-and-messaging/512/Paper_Plane-512.png"
			width="25px" height="25px" onclick="sendRecording()" />

		<span class="nav-item badge badge-pill badge-success text-wrap" style="font-size: 15px; margin-top: 8px; ">
			<a style="color: white"
				href="whatsapp://send?text=Join this online live drawing board <%=userroom %> on Draw Wid Me! http://drawwidme.herokuapp.com/connect/ly/<%=userroom %>"
				data-action="share/whatsapp/share">Invite to this channel on WhatsApp</a>

		</span>
	</div>
	<canvas id="myCanvas" style="width: 100%; height: 100%; "></canvas>
</body>
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
	integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
	crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
	integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
	crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
	integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
	crossorigin="anonymous"></script>

<script>
	alert('Use it in Full Screen mode for better use. [Update- Now you can record your drawing and then Send it]');

	var messageArray = [];
	var recording = false;
	var color = '';
	var background = 'white';
	var strokeWidth = 10;
	var strokeStyle = 'round';
	var slider = document.getElementById('range-slider');

	var username = document.getElementById('userinfo').value;
	var room = document.getElementById('userroom').innerHTML;


	function changeColor(value) {
		color = value;
	}

	function startRecording() {
		if (recording) {
			recording = false;
			return;
		}
		recording = true;
		document.getElementById("start").style.display = "none";

		document.getElementById("pause").style.display = "";

	}


	function stopRecording() {

		recording = false;
		document.getElementById("pause").style.display = "none";

		document.getElementById("start").style.display = "";

	}

	function sendRecording() {

		if (confirm("All Recordings after sending will be deleted from your browser, Still Want To Send?")) {
			console.log('send recording called');
			console.log(messageArray);

			for (let i = 0; i < messageArray.length; i++) {

				socket.emit('start drawing', messageArray[i][0]);

				for (let j = 1; j < messageArray[i].length - 1; j++) {

					socket.emit('drawing', messageArray[i][j]);


				}
				socket.emit('stop drawing', messageArray[i][messageArray[i].length - 1]);

			}
			messageArray = [];
		}


	}

	var myCanvas = document.getElementById("myCanvas");
	var ctx = myCanvas.getContext("2d");
	let ctx2 = myCanvas.getContext("2d");
	ctx2.lineCap = "round";
	var socket = io.connect();


	socket.emit('new user', { username, name, room }, function (data) {
		messageArray = [];
	});

	socket.on('just joined', (data) => {

		if (data.data !== username) {
			alert(data.data + ' joined in this board');
			console.log({ sender: socket.id, receiver: data.id, count: messageArray.length, room, name: data.data });
		}
	});


	function resize() {
		w = window.innerWidth;
		h = window.innerHeight;
		var temp_cnvs = document.createElement('canvas');
		var temp_cntx = temp_cnvs.getContext('2d');

		// set it to url new width & height and draw url current canvas data into it //
		temp_cnvs.width = w;
		temp_cnvs.height = h;
		temp_cntx.fillStyle = background;  // url original canvas's background color
		temp_cntx.fillRect(0, 0, w, h);
		temp_cntx.drawImage(myCanvas, 0, 0);
		// resize & clear url original canvas and copy back in url cached pixel data //
		myCanvas.width = w;
		myCanvas.height = h;
		ctx.lineWidth = strokeWidth;
		ctx.drawImage(temp_cnvs, 0, 0);

	}

	// add event listeners to specify when functions should be triggered
	window.addEventListener("resize", resize);


	// Fill Window Width and Height
	myCanvas.width = window.innerWidth;
	myCanvas.height = window.innerHeight;

	// Set Background Color
	ctx.fillStyle = background;
	ctx.fillRect(0, 0, myCanvas.width, myCanvas.height);



	socket.on('st', (data) => {


		if (data.username === username) {
			return;
		}

		console.log('user', data.username, username);
		ctx2.lineWidth = data.strokeWidth;
		ctx2.strokeStyle = data.color;
		ctx2.beginPath();

	});


	socket.on('dr', (data) => {

		if (data.username === username) {
			return;
		}
		console.log(data.cordinateArray);
		console.log(data.username, data.username);

		if (data.send) {



			for (let i = 0; i < data.cordinateArray.length; i++) {


				let ctx3 = ctx2;

				ctx3.strokeStyle = data.color;
				ctx3.lineWidth = data.width;

				let X = data.cordinateArray[i].canvasX - myCanvas.offsetLeft;
				let Y = data.cordinateArray[i].canvasY - myCanvas.offsetTop;

				ctx3.lineTo(X, Y);

				ctx3.stroke();

			}

		}

		else {

			for (let i = 0; i < data.cordinateArray.length; i++) {

				ctx2.strokeStyle = data.color;
				ctx2.lineWidth = data.width;

				let X = data.cordinateArray[i].canvasX - myCanvas.offsetLeft;
				let Y = data.cordinateArray[i].canvasY - myCanvas.offsetTop;

				ctx2.lineTo(X, Y);

				ctx2.stroke();


			}
		}

	});

	socket.on('sd', (data) => {

		console.log('drawing came');
		if (data.username === username) {
			return;
		}



		for (let i = 0; i < data.cordinateArray.length; i++) {

			if (data.send) {
				setTimeout(() => {
					ctx2.strokeStyle = data.color;
					let X = data.cordinateArray[i].canvasX - myCanvas.offsetLeft;
					let Y = data.cordinateArray[i].canvasY - myCanvas.offsetTop;

					ctx2.lineTo(X, Y);
					ctx2.stroke();
				}, 10000);
			}

			else {

				ctx2.strokeStyle = data.color;
				let X = data.cordinateArray[i].canvasX - myCanvas.offsetLeft;
				let Y = data.cordinateArray[i].canvasY - myCanvas.offsetTop;

				ctx2.lineTo(X, Y);

				ctx2.stroke();

			}
		}


		console.log('stop drawing came');
		ctx2.closePath();

	})

	var count = 0;
	var cordinateArray = [];
	let userarray = [];
	

	// Mouse Event Handlers
	if (myCanvas) {
		var isDown = false;
		var canvasX, canvasY;
		ctx.lineWidth = strokeWidth;


		$(myCanvas)
			.mousedown(function (e) {

				isDown = true;
				ctx.beginPath();
				canvasX = e.pageX - myCanvas.offsetLeft;
				canvasY = e.pageY - myCanvas.offsetTop;
				console.log('down', canvasX, canvasY, e.pageX, e.pageY);

				if (!recording) {
					socket.emit('start drawing', { room, username, color, strokeWidth });
				}


				else {
					userarray.push({ send: true, room, username, color, strokeWidth });
				}

				ctx.lineWidth = strokeWidth;


				ctx.moveTo(canvasX, canvasY);
			})
			.mousemove(function (e) {

				if (isDown !== false) {
					canvasX = e.pageX - myCanvas.offsetLeft;
					canvasY = e.pageY - myCanvas.offsetTop;


					count += 1;
					if (count == 5) {
						count = 0;
						if (!recording) {
							socket.emit('drawing', { room, username, cordinateArray });

						}
						else {
							userarray.push({ send: true, room, username, cordinateArray });
						}

						cordinateArray = [];
					}


					cordinateArray.push({ canvasX: e.pageX, canvasY: e.pageY, color, strokeWidth });

					ctx.lineWidth = strokeWidth;

					ctx.lineTo(canvasX, canvasY);
					ctx.strokeStyle = color;
					ctx.stroke();
				}
			})
			.mouseup(function (e) {
				isDown = false;
				console.log('stop');

				if (!recording) {
					socket.emit('stop drawing', { room, username, cordinateArray, color, strokeWidth });

				}

				else {
					userarray.push({ send: true, username, cordinateArray, color, strokeWidth });
					messageArray.push(userarray);
					console.log(messageArray);
					userarray = [];
				}
				cordinateArray = [];
				ctx.closePath();
			});
	}

	var counti = 0;
	// Touch Events Handlers

	let ctxTouch= ctx2;

	draw = {
		started: false,
		start: function (evt) {

			ctxTouch.beginPath();

			cordinateArray.push({ canvasX: evt.touches[0].pageX, canvasY: evt.touches[0].pageY, color, strokeWidth });

			if (!recording) {
				socket.emit('start drawing', { room, username, color, strokeWidth });
			}


			else {
				userarray.push({ send: true, room, username, color, strokeWidth });
			}

			ctxTouch.moveTo(
				evt.touches[0].pageX - myCanvas.offsetLeft,
				evt.touches[0].pageY - myCanvas.offsetTop
			);

			this.started = true;

		},
		move: function (evt) {
			if (this.started) {

				cordinateArray.push({ canvasX: evt.touches[0].pageX, canvasY: evt.touches[0].pageY, color, strokeWidth });

				counti += 1;
				if (counti == 5) {
					counti = 0;
					if (!recording) {
						socket.emit('drawing', { room, username, cordinateArray });

					}
					else {
						userarray.push({ send: true, room, username, cordinateArray });
					} cordinateArray = [];
				}

				ctxTouch.lineTo(
					evt.touches[0].pageX - myCanvas.offsetLeft,
					evt.touches[0].pageY - myCanvas.offsetTop
				);

				ctxTouch.strokeStyle = color;
				ctxTouch.lineWidth = strokeWidth;
				ctxTouch.stroke();
			}

		},
		end: function (evt) {

			if (!recording) {
				socket.emit('stop drawing', { room, username, cordinateArray, color, strokeWidth });

			}

			else {
				userarray.push({ send: true, username, cordinateArray, color, strokeWidth });
				messageArray.push(userarray);
				console.log(messageArray);
				userarray = [];
			}


			cordinateArray = [];
			counti = 0;
			this.started = false;
		}
	};



	slider.addEventListener('change', e => {
		strokeWidth = slider.value;
	})
	// Touch Events
	myCanvas.addEventListener('touchstart', draw.start, false);
	myCanvas.addEventListener('touchend', draw.end, false);
	myCanvas.addEventListener('touchmove', draw.move, false);

	// Disable Page Move
	document.body.addEventListener('touchmove', function (evt) {
		evt.preventDefault();
	}, false);

</script>

</html>